/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber"
import { a, Globals } from "@react-spring/three"

import IslandScene from "../assets/3d/island.glb"

// Globals.assign({
//   frameLoop: 'always',
// })

const Island = ({ isRotating, setIsRotating, ...props }) => {
  const islandRef = useRef()
  const { nodes, materials } = useGLTF(IslandScene);

  // getting the island 3d component to rotate

  // get access to the threejs renderer and viewport
  const { gl, viewport } = useThree()

  // use ref to get the last mouse position and location speed
  const lastX = useRef(0)
  const rotationSpeed = useRef(0)
  // dampening factor is how fast the rotation moves and slows down after we stop actively rotating
  const dampeningFactor = 0.95

  // funtion for when you click the mouse down
  const handleMouseClickDown = (e) => {
    e.stopPropagation()
    e.preventDefault()
    setIsRotating(true)

    // determine if its a touch event on a phone or a moue click down event
    const clientX = e.touches ? e.touches[0].clientX : e.clientX

    //get the last touch position
    lastX.current = clientX
  }

  // when you release the mouse and stop trying to rotate/cannot rotate
  const handleMouseClickup = (e) => {
    e.stopPropagation()
    e.preventDefault()
    setIsRotating(false)
  }

  // when you click down the mouse and actually start rotaing/moving around
  const handleMouseClickDownAndMove = (e) => {
    e.stopPropagation()
    e.preventDefault()

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX

      // calculate the changes in a horizontal postion by the time we stop cllicking/release the moue
      const delta = (clientX - lastX.current) / viewport.width

      // update island position based on the mouse current location
      islandRef.current.rotation.y += delta * 0.01 * Math.PI

      // update rference for the clientx postion
      lastX.current = clientX

      // update rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI
    }
  }

  const handleKeyDown = (e) => {
    if (e.key === 'ArrowLeft') {
      if (!isRotating) setIsRotating(true)
      islandRef.current.rotation.y += 0.01 * Math.PI
    } else if (e.key === 'ArrowRight') {
      if (!isRotating) setIsRotating(true)
      islandRef.current.rotation.y -= 0.01 * Math.PI
    }
  }

  const handleKeyUp = (e) => {
    if (e.key === 'Arrowleft' || e.key === 'ArrowRight') {
      setIsRotating(false)
    }
  }

  useFrame(() => {
    // if isnotrotaing is false then we want to apply the dampening factor to make it slow down smoothly
    if (!isRotating) {
      rotationSpeed.current *= dampeningFactor

      // compeletrly stop rotation if speed is really low
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0
      }
      
      // to make rotating smoother as we move
      islandRef.current.rotation.y += rotationSpeed.current
    } else {
      // get current rotation if we are currenlt rotating
      const rotation = islandRef.current.rotation.y
    }
  })

  useEffect(() => {
    // get access to the canvas were working on
    const canvas = gl.domElement

    // addeventlisteners to all pointers
    canvas.addEventListener('pointerdown', handleMouseClickDown)
    canvas.addEventListener('pointerup', handleMouseClickup)
    canvas.addEventListener('pointermove', handleMouseClickDownAndMove)
    document.addEventListener('keydown', handleKeyDown)
    document.addEventListener('keyup', handleKeyUp)

    // removing the pointers after we exit the canvas
    canvas.removeEventListener('pointerdown', handleMouseClickDown)
    canvas.removeEventListener('pointerup', handleMouseClickup)
    canvas.removeEventListener('pointermove', handleMouseClickDownAndMove)
    document.removeEventListener('keydown', handleKeyDown)
    document.removeEventListener('keyup', handleKeyUp)

  }, [gl, handleMouseClickDownAndMove, handleMouseClickDown, handleMouseClickup])



  return (
    <a.group ref={islandRef} {...props} >
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
}

export default Island
